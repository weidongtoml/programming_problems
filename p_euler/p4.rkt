#lang racket

;;; Largest palindrome product
;;; A palindromic number reads the same both ways.
;;; The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
;;; Find the largest palindrome made from the product of two 3-digit numbers.

;; return a number generated by reversing the digits of n
;; e.g. (reverse-num 12345) => 54321
(define (reverse-num n)
  (define (helper a b)
    (if (eqv? a 0)
        b
        (helper (exact-floor (/ a 10))
                (+ (* b 10) (remainder a 10)))))
  (helper n 0))

;; check if a given number is a palindrome
(define (is-palindrome? n)
  (eqv? n (reverse-num n)))

(define (find-largest-palindrome n-digits)
  (let ([min-v (expt 10 n-digits)]
        [max-v (- (expt 10 (+ 1 n-digits)) 1)])
    (define (helper n a result)
      (if (or (< a min-v)
              (> (first result) 0)) ; we only need to find the first largest
          result
          (let* ([p (* n a)]
                 [max-palindrome (if (and (is-palindrome? p)
                                          (> p (first result)))
                                     (list p n a)
                                     result)])
            (helper n (- a 1) max-palindrome))))
    (define (helper2 n result)
      (if (or (< n min-v)
              (> (first result) (* n max-v))) ; if the result is greater than the worst case, we can stop here
          result
          (helper2 (- n 1)
                   (helper n max-v result))))
    (helper2 max-v (list 0 0 0))))

(find-largest-palindrome 1)
(find-largest-palindrome 2)
 